# Generated by Scrape::ApiDefinitionsJob: 2018-10-08 19:51:23 UTC
# See: https://git.io/vx5CY
---
- name: Alexandria Api
  api_name: alexandria_api
  description: 
  methods:
  - api_method: info
    purpose: Returns info about the current state of the blockchain
    parameter_json: "{}"
    expected_response_json: '{"info":{"head_block_number":175238,"head_block_id":"0002ac86e5ffc83ed0d1a3a8823dfd40c5a10171","time":"2018-11-13T13:19:18","current_witness":"initminer","current_supply":"350076100.030352 SPHTX","total_vesting_shares":"20895.823972 VESTS","witness_required_vesting":"250000.000000 VESTS","maximum_block_size":262144,"current_aslot":3429986,"recent_slots_filled":"340282366920938463463374607431768211455","participation_count":128,"last_irreversible_block_num":175187,"average_block_size":25,"witness_majority_version":"0.0.0","hardfork_version":"1.0.0","head_block_age":"2 seconds old","participation":"100.00000000000000000","median_sbd1_price":{"base":"0.000000 SPHTX","quote":"0.000000 SPHTX"},"median_sbd2_price":{"base":"0.000000 SPHTX","quote":"0.000000 SPHTX"},"median_sbd3_price":{"base":"0.000000 SPHTX","quote":"0.000000 SPHTX"},"median_sbd4_price":{"base":"0.000000 SPHTX","quote":"0.000000 SPHTX"},"median_sbd5_price":{"base":"0.000000 SPHTX","quote":"0.000000 SPHTX"},"account_creation_fee":"0.000000 SPHTX"}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.info", "params": {}, "id": 1}'
  - api_method: about
    purpose: Returns info such as client version, git version of graphene/fc, version of boost, openssl.
    parameter_json: "{}"
    expected_response_json: '{"about":{"blockchain_version":"1.0.0","client_version":"1.0.0-260-gd3032b2","sophiatx_revision":"d3032b2840d0c5838df512532f98b28a2ce491e6","sophiatx_revision_age":"11 days ago","fc_revision":"b2b6ed37e8172eeddd3e167cba13a3aac83f409c","fc_revision_age":"14 days ago","compile_date":"compiled on Nov 12 2018 at 16:25:29","boost_version":"1.67","openssl_version":"OpenSSL 1.1.1  11 Sep 2018","build":"linux 64-bit","server_blockchain_version":"1.0.0","server_sophiatx_revision":"d3032b2840d0c5838df512532f98b28a2ce491e6","server_fc_revision":"b2b6ed37e8172eeddd3e167cba13a3aac83f409c","chain_id":"f8174877749eb3b8ba9202be14c2179c265e72de93f7c9dcd1d943dd03664352"}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.about", "params": {}, "id": 1}'
  - api_method: get_version
    purpose: Returns the versions of blockchain, SophiaTX, and FC.
    parameter_json: "{}"
    expected_response_json: '{"version_info":{"blockchain_version":"1.0.0","sophiatx_revision":"0000000000000000000000000000000000000000","fc_revision":"","chain_id":"000000000000000000000000000000000000000000000000000000000000000000000000"}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_version", "params": {}, "id": 1}'
    curl_responses:
    -  '{"jsonrpc":"2.0","result":{"version_info":{"blockchain_version":"1.0.0","sophiatx_revision":"d3032b2840d0c5838df512532f98b28a2ce491e6","fc_revision":"b2b6ed37e8172eeddd3e167cba13a3aac83f409c","chain_id":"f8174877749eb3b8ba9202be14c2179c265e72de93f7c9dcd1d943dd03664352"}},"id":1}'
  - api_method: get_dynamic_global_properties
    purpose: 'Returns the current dynamic global properties. See [Understanding Dynamic Global Properties](/tutorials/#tutorials-dynamic-global-properties)'
    parameter_json: "{}"
    expected_response_json: '{"properties":{"head_block_number":0,"head_block_id":"0000000000000000000000000000000000000000","time":"1970-01-01T00:00:00","current_witness":"","current_supply":"0.000000 SPHTX","total_vesting_shares":"0.000000 VESTS","witness_required_vesting":"0.000000 VESTS","maximum_block_size":0,"current_aslot":0,"recent_slots_filled":"0","participation_count":0,"last_irreversible_block_num":0,"average_block_size":0}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_dynamic_global_properties", "params": {}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"properties":{"head_block_number":58019,"head_block_id":"0000e2a396fb66a55ae156bf48ce26105b984826","time":"1970-01-01T00:00:00","current_witness":"initminer","current_supply":"350015744.660303 SPHTX","total_vesting_shares":"4169.375986 VESTS","witness_required_vesting":"250000.000000 VESTS","maximum_block_size":262144,"current_aslot":7835941,"recent_slots_filled":"340282366920938463463374607431768211455","participation_count":128,"last_irreversible_block_num":57968,"average_block_size":49}},"id":1}'
  - api_method: get_key_references
    purpose: Returns all accounts that have the key associated with their owner or active authorities.<br><br>
      <b>Request</b>

      <li>keys - public keys</li><br>
      <b>Response</b>

      <li>accounts - accounts associated with input public keys</li><br>
    parameter_json: '{"keys":["SPH53jwLxn81x9TNir88SHGEtbtrrU5h3Pf4cyoehY22xw4Xg3zyk"]}'
    expected_response_json: '{"accounts":[["dsgrjxA6FHQA2CV4W-vezsaYrQQ"]]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_key_references", "params": {"keys":["SPH53jwLxn81x9TNir88SHGEtbtrrU5h3Pf4cyoehY22xw4Xg3zyk"]}, "id": 1}'
  - api_method: account_exist
    purpose: Check if account exists<br><br>
              <b>Request</b>

              <li>account_name</li><br>
              <b>Response</b>

              <li>account_exist - true if provided account exists, otherwise false</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"account_exist":false}'
  - api_method: add_fee
    purpose: Add custom fee to the operation<br><br>
              <b>Request</b>

              <li>op - Operation where the fee is added</li>
              <li>fee - Fee to be added</li><br>
              <b>Response</b>

              <li>op - operation with adjusted fee</li><br>
    parameter_json: '{"op": ["transfer", {"fee": "0.000000 SPHTX", "from": "", "to": "", "amount": "0.000000
      SPHTX", "memo": ""}], "fee": "0.000000 SPHTX"}'
    expected_response_json: '{"op":["transfer",{"fee":"0.000000 SPHTX","from":"","to":"","amount":"0.000000
      SPHTX","memo":""}]}'
  - api_method: add_signature
    purpose: Adds signature to the provided transaction<br><br>
              <b>Request</b>

              <li>tx - unsigned transaction</li>
              <li>signature - signature that will be add to transaction</li><br>
              <b>Response</b>

              <li>signed_tx - signed transaction</li><br>
    parameter_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]},"signature":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}'
    expected_response_json: '{"signed_tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]}}'
  - api_method: broadcast_transaction
    purpose: Broadcasts a transaction into the network and waits for it to be processed synchronously.<br><br>
              There are 4 previous steps that needs to be done before broadcast is called.<br>
              <b>All of them can and should be done locally, not on the blockchain side !!!</b> For inspiration, see<br>

              <li><a href="#alexandria_api.create_simple_transaction">alexandria_api.create_simple_transaction</a></li>
              <li><a href="#alexandria_api.get_transaction_digest">alexandria_api.get_transaction_digest</a></li>
              <li><a href="#alexandria_api.sign_digest">alexandria_api.sign_digest</a></li>
              <li><a href="#alexandria_api.add_siganture">alexandria_api.add_siganture</a></li>

              or

              <li><a href="#alexandria_api.send_and_sign_operation">alexandria_api.send_and_sign_operation</a></li>

              that combines all the previous calls into one.<br><br>

              <b>Request</b>

              <li>tx - signed transaction</li><br>
              <b>Response</b>

              <li>tx - broadcasted transaction with block information that it is included in</li><br>
    parameter_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]}}'
    expected_response_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[],"transaction_id":"0000000000000000000000000000000000000000","block_num":0,"transaction_num":0}}'

  - api_method: calculate_fee
    purpose: Returns required fee for the given operation.<br><br>
              <b>Request</b>

              <li>op - operation to be evaluated</li>
              <li>symbol - symbol of the fee paying currency</li><br>
              <b>Response</b>

              <li>fee - calculated required fee</li><br>
    parameter_json: '{"op":["transfer",{"fee":"0.000000 SPHTX","from":"","to":"","amount":"0.000000
      SPHTX","memo":""}],"symbol":"SPHTX"}'
    expected_response_json: '{"fee":"0.000000 SPHTX"}'
  - api_method: create_simple_authority
    purpose: Creates simple authority from provided public key.<br><br>
      <b>Request</b>

      <li>pub_key</li><br>

      <b>Response</b>

      <li>simple_authority</li><br>
    parameter_json: '{"pub_key":"SPH1111111111111111111111111111111114T1Anm"}'
    expected_response_json: '{"simple_authority":{"weight_threshold":0,"account_auths":[],"key_auths":[]}}'
  - api_method: create_simple_managed_authority
    purpose: Creates simple managed authority from provided account name.<br><br>
      <b>Request</b>

      <li>managing_account - i.e. "account_name"</li><br>

      <b>Response</b>

      <li>simple_managed_authority</li><br>
    parameter_json: '{"managing_account":""}'
    expected_response_json: '{"simple_managed_authority":{"weight_threshold":0,"account_auths":[],"key_auths":[]}}'
  - api_method: create_simple_multisig_authority
    purpose: Creates simple multisig authority from provided public keys.<br><br>
      <b>Request</b>

      <li>pub_keys - list of public keys</li>
      <li>required_signatures - number of required signatures</li><br>

      <b>Response</b>

      <li>simple_multisig_authority</li><br>
    parameter_json: '{"pub_keys":[],"required_signatures":0}'
    expected_response_json: '{"simple_multisig_authority":{"weight_threshold":0,"account_auths":[],"key_auths":[]}}'
  - api_method: create_simple_multisig_managed_authority
    purpose: Creates simple multisig managed authority from provided account_name.<br><br>
      <b>Request</b>

      <li>managing_accounts - vector of accounts  i.e. ["account_name"]</li>
      <li>required_signatures - number of required signatures</li><br>

      <b>Response</b>

      <li>simple_multisig_managed_authority</li><br>
    parameter_json: '{"managing_accounts":[],"required_signatures":0}'
    expected_response_json: '{"simple_multisig_managed_authority":{"weight_threshold":0,"account_auths":[],"key_auths":[]}}'
  - api_method: create_simple_transaction
    purpose: Creates transaction in requirded format from provided single operation.<br><br>
      <b>Request</b>

      <li>op - operation that should be in this transaction</li><br>

      <b>Response</b>

      <li>simple_tx - created transaction with provided operation</li><br>
    parameter_json: '{"op":["custom_json",{"fee":"0.000000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}]}'
    expected_response_json: '{"simple_tx":{"ref_block_num":3701,"ref_block_prefix":914684397,"expiration":"2019-04-04T13:24:15","operations":[["custom_json",{"fee":"0.010000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}]],"extensions":[],"signatures":[]}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.create_simple_transaction", "params": {"op":["custom_json",{"fee":"0.000000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}]}, "id": 1}'
  - api_method: create_transaction
    purpose: Creates transaction in requirded format from provided list of operations.<br><br>
              <b>Request</b>

              <li>op_vec - list of operations that should be in this transaction</li><br>

              <b>Response</b>

              <li>simple_tx - created transaction with provided operations</li><br>
    parameter_json: '{"op_vec":[]}'
    expected_response_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]}}'
  - api_method: custom_object_subscription
    purpose:
    parameter_json: '{"return_id":0,"app_id":0,"account_name":"","search_type":"","start":0}'
    expected_response_json: '{"subscription":0}'
  - api_method: decrypt_data
    purpose: Decrypts provided data.<br><br>
      <b>Request</b>

      <li>data - data to be decrypted</li>
      <li>public_key - public key of sender</li>
      <li>private_key - private key of recipient</li><br>

      <b>Response</b>

      <li>decrypted_data - decrypted data</li><br>
    parameter_json: '{"data":"","public_key":"SPH1111111111111111111111111111111114T1Anm","private_key":""}'
    expected_response_json: '{"decrypted_data":""}'

  - api_method: encrypt_data
    purpose: Encrypts provided data.<br><br>
      <b>Request</b>

      <li>data - data to be encrypted</li>
      <li>public_key - public key of sender</li>
      <li>private_key - private key of recipient</li><br>

      <b>Response</b>

      <li>encrypted_data - decrypted data</li><br>
    parameter_json: '{"data":"","public_key":"SPH1111111111111111111111111111111114T1Anm","private_key":""}'
    expected_response_json: '{"encrypted_data":""}'
  - api_method: fiat_to_sphtx
    purpose: Converts the given amount of fiat to sphtx.<br><br>
      <b>Request</b>

      <li>fiat - amount to be converted</li><br>

      <b>Response</b>

      <li>sphtx - amount of SPHTX if conversion is possible,or returns back fiat if not.</li><br>
    parameter_json: '{"fiat":"0.000000 EUR"}'
    expected_response_json: '{"sphtx":"0.000000 SPHTX"}'
  - api_method: to_base64
    purpose: Encodes data to base64.<br><br>
      <b>Request</b>

      <li>data - data to encoded</li><br>

      <b>Response</b>

      <li>base64_str - encoded data.</li><br>
    parameter_json: '{"data":""}'
    expected_response_json: '{"base64_str":""}'
  - api_method: from_base64
    purpose: Decodes data from base64.<br><br>
      <b>Request</b>

      <li>data - data to decoded</li><br>

      <b>Response</b>

      <li>str - decoded data.</li><br>
    parameter_json: '{"data":""}'
    expected_response_json: '{"str":""}'
  - api_method: generate_key_pair
    purpose: Generates public/private key pair.

              <blockquote class="warning">
                <h5>This functionality should be done locally in SDK and not remotely !!!</h5>
              </blockquote>

              <b>Response</b>

              <li>key_pair - generated pair of keys.</li><br>
    parameter_json: "{}"
    expected_response_json: '{"key_pair":{"pub_key":"SPH1111111111111111111111111111111114T1Anm","wif_priv_key":""}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.generate_key_pair", "params": {}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"key_pair":{"pub_key":"SPH59JiJ8xruCD1HdRAGJemfMnUwr5KUm8dJXYe6R5fFdkD3UhsU7","wif_priv_key":"5KEAAt3W2nrc61ZMkrLLbqSK9wqi8N3Afrr1sWDb7Q7xd9CPHz7"}},"id":1}'
  - api_method: generate_key_pair_from_brain_key
    purpose: Generates public/private key pair based on brain key.

              <blockquote class="warning">
                <h5>This functionality should be done locally in SDK and not remotely !!!</h5>
              </blockquote>

              <b>Request</b>

              <li>brain_key - brain key for generating key pair</li><br>

              <b>Response</b>

              <li>key_pair - generated pair of keys.</li><br>
    parameter_json: '{"brain_key":""}'
    expected_response_json: '{"key_pair":{"pub_key":"SPH1111111111111111111111111111111114T1Anm","wif_priv_key":""}}'
  - api_method: get_account_name_from_seed
    purpose: Returns account name saved in blockchain based on human-readable seed name.

              <blockquote class="warning">
                <h5>In all further transactions that write data into blockchain, real blockchain account name must be used. !!!</h5>
              </blockquote>

              <b>Request</b>

              <li>seed - seed/human-readble account name</li><br>

              <b>Response</b>

              <li>account_name - real account name saved in blockchain.</li><br>
    parameter_json: '{"seed":""}'
    expected_response_json: '{"account_name":""}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_account_name_from_seed", "params": {"seed" : "sophiatx_user"}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"account_name":"7HLPQ1kpnAIWawkAEgcoN4I7qJY"},"id":1}'
  - api_method: get_account
    purpose: Returns account info specified by name. Either seed name or blockchain real account name can be used.<br><br>
      <b>Request</b>

      <li>account_name - name of the account to provide information about i.e. "account_name"</li><br>

      <b>Response</b>

      <li>account - public account info stored in the blockchain.</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"account":[{"id":0,"name":"","owner":{"weight_threshold":0,"account_auths":[],"key_auths":[]},"active":{"weight_threshold":0,"account_auths":[],"key_auths":[]},"memo_key":"","json_metadata":"{}","voting_proxy":"","balance":"0.000000 SPHTX","vesting_shares":"0.000000 VESTS","vesting_withdraw_rate":"0.000000 VESTS","to_withdraw":0,"witness_votes":[],"sponsored_accounts":[],"sponsoring_account":""}]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_account", "params": {"account_name" : "sophiatx_user"}, "id": 1}'
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_account", "params": {"account_name" : "7HLPQ1kpnAIWawkAEgcoN4I7qJY"}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"account":[{"id":50,"name":"7HLPQ1kpnAIWawkAEgcoN4I7qJY","owner":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH7qASF1CfENDRWdKC5gQCktydRQM2aY3i1d9wFdu1fjpURgTxiw",1]]},"active":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH5ekkeER1xi3EDoxoggo2ruMgPazKsGa8Pj44qrD326oDk5rgKP",1]]},"memo_key":"SPH4vtSio7iGMggFboydFjgRZknPEH1BExcN3r4rjb9iznJQr7Mqy","json_metadata":"{\"data\":\"anything related to the sophiatx_user\"}","voting_proxy":"","balance":"0.000000 SPHTX","vesting_shares":"0.000000 VESTS","vesting_withdraw_rate":"0.000000 VESTS","to_withdraw":0,"witness_votes":[],"sponsored_accounts":[],"sponsoring_account":""}]},"id":1}'
    - '{"jsonrpc":"2.0","result":{"account":[{"id":50,"name":"7HLPQ1kpnAIWawkAEgcoN4I7qJY","owner":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH7qASF1CfENDRWdKC5gQCktydRQM2aY3i1d9wFdu1fjpURgTxiw",1]]},"active":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH5ekkeER1xi3EDoxoggo2ruMgPazKsGa8Pj44qrD326oDk5rgKP",1]]},"memo_key":"SPH4vtSio7iGMggFboydFjgRZknPEH1BExcN3r4rjb9iznJQr7Mqy","json_metadata":"{\"data\":\"anything related to the sophiatx_user\"}","voting_proxy":"","balance":"0.000000 SPHTX","vesting_shares":"0.000000 VESTS","vesting_withdraw_rate":"0.000000 VESTS","to_withdraw":0,"witness_votes":[],"sponsored_accounts":[],"sponsoring_account":""}]},"id":1}'
  - api_method: get_accounts
    purpose: Returns accounts info specified by names. Either seed names or blockchain real account names can be used.<br><br>
      <b>Request</b>

      <li>account_names - list of account names to provide information about</li><br>

      <b>Response</b>

      <li>accounts - public accounts info stored in the blockchain.</li><br>
    parameter_json: '{"account_names":["dsgrjxA6FHQA2CV4W-vezsaYrQQ", "ayp1dsJTvH13b8k_4aXTZC5rp5g"]}'
    expected_response_json: '{"accounts":[{"id":0,"name":"","owner":{"weight_threshold":0,"account_auths":[],"key_auths":[]},"active":{"weight_threshold":0,"account_auths":[],"key_auths":[]},"memo_key":"","json_metadata":"{}","voting_proxy":"","balance":"0.000000 SPHTX","vesting_shares":"0.000000 VESTS","vesting_withdraw_rate":"0.000000 VESTS","to_withdraw":0,"witness_votes":[],"sponsored_accounts":[],"sponsoring_account":"","vesting_balance":"0.000000 SPHTX","transfer_history":[],"other_history":[]}]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_accounts", "params": {"account_names":["dsgrjxA6FHQA2CV4W-vezsaYrQQ", "ayp1dsJTvH13b8k_4aXTZC5rp5g"]}, "id": 1}'
    curl_responses:
    -  '{"jsonrpc":"2.0","result":{"accounts":[{"id":44,"name":"dsgrjxA6FHQA2CV4W-vezsaYrQQ","owner":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH53jwLxn81x9TNir88SHGEtbtrrU5h3Pf4cyoehY22xw4Xg3zyk",1]]},"active":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH5exSMJE8QyFbHjtigobia2pGZj88eRG3nj3Te7XFWVLfB6JewS",1]]},"memo_key":"SPH8eAn9t5ryjarx88uvXvFoysBYqaRLNhpTNFgqdBWjSHLoonypi","json_metadata":"{}","voting_proxy":"","balance":"0.000000 SPHTX","vesting_shares":"0.000000 VESTS","vesting_withdraw_rate":"0.000000 VESTS","to_withdraw":0,"witness_votes":[],"sponsored_accounts":[],"sponsoring_account":"","vesting_balance":"0.000000 SPHTX","transfer_history":[],"other_history":[]},{"id":45,"name":"ayp1dsJTvH13b8k_4aXTZC5rp5g","owner":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH5enokWABeJzdtyTKJ7psxv3ex85PcschmGugNX38ioUSiJy9nk",1]]},"active":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH4ycHC92BWtYWQyDKc5v2331z4HQ1VTQcVMic76ZE2CrwCG7h1X",1]]},"memo_key":"SPH7s5uMfDoKwPXiczxp23j7SaAvWBDvZNak3aNegLaB6SPEp1S3u","json_metadata":"{}","voting_proxy":"","balance":"0.000000 SPHTX","vesting_shares":"0.000000 VESTS","vesting_withdraw_rate":"0.000000 VESTS","to_withdraw":0,"witness_votes":[],"sponsored_accounts":[],"sponsoring_account":"","vesting_balance":"0.000000 SPHTX","transfer_history":[],"other_history":[]}]},"id":1}'
  - api_method: get_account_balance
    purpose: Returns account balance in SOPHIATX_SATOSHIS.<br>1 SPHTX = 1000 000 SOPHIATX_SATOSHIS<br><br>
      <b>Request</b>

      <li>account_name - account name to provide balance of</li><br>

      <b>Response</b>

      <li>account_balance - account balande in SOPHIATX_SATOSHIS.</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"account_balance":0}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_account_balance", "params": {"account_name":"7HLPQ1kpnAIWawkAEgcoN4I7qJY"}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"account_balance":1000000000},"id":1}'
  - api_method: get_account_history
    purpose: Returns a history of all operations for a given account. Account operations have sequence numbers from 0 to N where N is the most recent operation. This method
              returns operations in the range [from-limit,from]<br><br>
      <b>Request</b>

      <li>account - account whose history will be returned</li>
      <li>from - the absolute sequence number,-1 means most recent,limit is the number of operations before from.</li>
      <li>limit - the maximum number of items that can be queried (0 to 1000],must be less than from</li><br>

      <b>Response</b>

      <li>account_history - history of all operations.</li><br>
    parameter_json: '{"account":"","start":0,"limit":0}'
    expected_response_json: '{"account_history":[]}'
  - api_method: get_active_authority
    purpose: Returns active authority for given account<br><br>
      <b>Request</b>

      <li>account_name - account name i.e. "account_name"</li><br>

      <b>Response</b>

      <li>active_authority</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"active_authority":{"weight_threshold":0,"account_auths":[],"key_auths":[]}}'
  - api_method: get_active_witnesses
    purpose: Returns the list of witnesses producing blocks in the current round (51 Blocks).<br><br>

      <b>Response</b>

      <li>active_witnesses</li><br>
    parameter_json: "{}"
    expected_response_json: '{"active_witnesses":[]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_active_witnesses", "params": {}, "id": 1}'
  - api_method: get_application_buyings
    purpose: Gets all app buyings by app_name or buyer.<br><br>
      <b>Request</b>

      <li>name - application id or buyers name i.e. "account_name"</li>
      <li>search_type - one of "by_buyer","by_app_id"</li>
      <li>count - number of items to retrieve</li><br>

      <b>Response</b>

      <li>application_buyings</li><br>
    parameter_json: '{"name":"","search_type":"","count":0}'
    expected_response_json: '{"application_buyings":[]}'
  - api_method: get_applications
    purpose: Gets all application objects.<br><br>
      <b>Request</b>

      <li>names - list of applications names</li><br>

      <b>Response</b>

      <li>applications</li><br>
    parameter_json: '{"names":[]}'
    expected_response_json: '{"applications":[]}'
  - api_method: get_applications_by_ids
    purpose: Gets all application objects by their id's.<br><br>
      <b>Request</b>

      <li>ids - list of applications id'ss</li><br>

      <b>Response</b>

      <li>applications</li><br>
    parameter_json: '{"ids":[]}'
    expected_response_json: '{"applications":[]}'
  - api_method: get_block
    purpose: Returns the details of a block based on a block num.<br><br>
      <b>Request</b>

      <li>block_num - number/height of block</li><br>

      <b>Response</b>

      <li>block - block info</li><br>
    parameter_json: '{"num":0}'
    expected_response_json: '{"block":{"previous":"0000e11cfaab5a841cc6f33b6d94efd58d186800","timestamp":"1970-01-01T00:00:00","witness":"","transaction_merkle_root":"0000000000000000000000000000000000000000","extensions":[],"witness_signature":"","transactions":[],"block_id":"0000000000000000000000000000000000000000","signing_key":"SPH1111111111111111111111111111111114T1Anm","transaction_ids":[]}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_block", "params": {"num":57629}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"block":{"previous":"0000000000000000000000000000000000000000","timestamp":"2019-04-15T12:37:33","witness":"","transaction_merkle_root":"0000000000000000000000000000000000000000","extensions":[],"witness_signature":"1f56ee79e72e287ed205775c9caf02c805516e28513da8963ecf9ab26d84c5e4bd400553054fb4e51d7c3e2254e4075afd0c9b740f0fcc07869b7419c6af485d86","transactions":[],"block_id":"0000e11dcd83233a6d0c8ec43ecaf1626115f86e","signing_key":"SPH6LLegbAgLAy28EHrffBVuANFWcFgmqRMW13wBmTExqFE9SCkg4","transaction_ids":[]}},"id":1}'
  - api_method: get_ops_in_block
    purpose: Returns all operations contained in a block based on a block num.<br><br>
      <b>Request</b>

      <li>block_num - number/height of block</li>
      <li>only_virtual - whether to only return virtual operations</li><br>

      <b>Response</b>

      <li>ops_in_block - operations included in block</li><br>
    parameter_json: '{"block_num":0,"only_virtual":false}'
    expected_response_json: '{"ops_in_block":[]}'
  - api_method: get_feed_history
    purpose: Returns the current price feed history for specified symbol.<br><br>
      <b>Request</b>

      <li>symbol - symbol, for which price feed history is returned.<br>
      Possible values - EUR/USD/CNY/GBP</li><br>

      <b>Response</b>

      <li>feed_history</li><br>
    parameter_json: '{"symbol":""}'
    expected_response_json: '{"feed_history":{"id":0,"current_median_price":{"base":"0.000000
      SPHTX","quote":"0.000000 SPHTX"},"price_history":[]}}'
  - api_method: get_memo_key
    purpose: Returns public memo key for given account.<br><br>
      <b>Request</b>

      <li>account_name - account name i.e. "account_name"</li><br>

      <b>Response</b>

      <li>memo_key</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"memo_key":"SPH1111111111111111111111111111111114T1Anm"}'
  - api_method: get_owner_authority
    purpose: Returns public memo key for given account.<br><br>
      <b>Request</b>

      <li>account_name - account name i.e. "account_name"</li><br>

      <b>Response</b>

      <li>owner_authority</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"owner_authority":{"weight_threshold":0,"account_auths":[],"key_auths":[]}}'
  - api_method: get_owner_history
    purpose: Returns the owner history of an account.<br><br>
      <b>Request</b>

      <li>account_name - account name i.e. "account_name"</li><br>

      <b>Response</b>

      <li>owner_history</li><br>
    parameter_json: '{"account":""}'
    expected_response_json: '{"owner_history":[]}'
  - api_method: get_public_key
    purpose: Returns paired public key to provided private key.<br><br>
      <b>Request</b>

      <li>private_key</li><br>

      <b>Response</b>

      <li>public_key</li><br>
    parameter_json: '{"private_key":""}'
    expected_response_json: '{"public_key":"SPH1111111111111111111111111111111114T1Anm"}'
  - api_method: get_received_documents
    purpose: Returns custom json or binary documents that were saved into blockchain filtered by app_id and search_type<br><br>
               <b>Request</b>

               <li>app_id - general filter</li>
               <li>account_name - name of account used in search_type filters</li>
               <li>search type (_reverse in search_types will be deleted in next version)
                 <ul>
                   <li>by_sender_reverse</li>
                   <li>by_recipient_reverse</li>
                   <li>by_sender_datetime_reverse</li>
                   <li>by_recipient_datetime_reverse</li>
                 </ul>
               </li>
               <li>start - index of starting element</li>
               <li>count - max number of elements to be returned</li><br>

               <b>Response</b>

               <li>received_documents - list of received documents filtered by app_id and search_type</li><br>

    parameter_json: '{"app_id": 0,"account_name": "","search_type": "","start": 0,"count": 10}'
    expected_response_json: '{"received_documents":[]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.get_received_documents", "params": {"app_id": 2,"account_name": "user2","search_type": "by_sender_reverse","start": "0","count": 10}, "id": 1}'
    curl_responses:
    -  '{"received_documents":[[1,{"id":4,"sender":"user1","recipients":["user2"],"app_id":1,"data":"{\"data\":\"app 1 data\"}","received":"2019-04-05T08:39:42","binary":false}],[2,{"id":5,"sender":"user1","recipients":["user2"],"app_id":1,"data":"{\"data\":\"app 1 data idx 2\"}","received":"2019-04-05T08:39:54","binary":false}],[3,{"id":6,"sender":"user1","recipients":["user2"],"app_id":1,"data":"{\"data\":\"app 1 data idx 3\"}","received":"2019-04-05T08:40:00","binary":false}]]}'
  - api_method: get_required_signatures
    purpose: Returns list of public keys (authorities) required for signing provided transaction.<br><br>
      <b>Request</b>

      <li>tx</li><br>

      <b>Response</b>

      <li>required_signatures</li><br>
    parameter_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]}}'
    expected_response_json: '{"required_signatures":[]}'
  - api_method: get_transaction
    purpose: Returns the details of a transaction based on a transaction id.<br><br>
      <b>Request</b>

      <li>tx_id - transaction id</li><br>

      <b>Response</b>

      <li>tx - transaction info</li><br>
    parameter_json: '{"tx_id":"0000000000000000000000000000000000000000"}'
    expected_response_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[],"transaction_id":"0000000000000000000000000000000000000000","block_num":0,"transaction_num":0}}'
  - api_method: get_transaction_digest
    purpose: Returns calculated digest of provided transaction.<br><br>
      <b>Request</b>

      <li>tx - transaction</li><br>

      <b>Response</b>

      <li>tx_digest - calculated digest</li><br>
    parameter_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]}}'
    expected_response_json: '{"tx_digest":"0000000000000000000000000000000000000000000000000000000000000000"}'
  - api_method: get_transaction_id
    purpose: Returns calculated transaction id based on provided transaction in json.<br><br>
      <b>Request</b>

      <li>tx - transaction</li><br>

      <b>Response</b>

      <li>tx_id - calculated transaction id</li><br>
    parameter_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]}}'
    expected_response_json: '{"tx_id":"0000000000000000000000000000000000000000"}'
  - api_method: get_vesting_balance
    purpose: Returns vestig balance for given account in SOPHIATX_SATOSHIS.<br><br>
      <b>Request</b>

      <li>account_name - account name i.e. "account_name"</li><br>

      <b>Response</b>

      <li>vesting_balance - in SOPHIATX_SATOSHIS</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"vesting_balance":0}'
  - api_method: get_witness
    purpose: Returns information about the given witness..<br><br>
      <b>Request</b>

      <li>owner_account - name or id of the witness account owner i.e. "account_name",or the id of the witness</li><br>

      <b>Response</b>

      <li>witness(optional) - information about the witness stored in the block chain</li><br>
    parameter_json: '{"owner_account":""}'
    expected_response_json: "{}"
  - api_method: list_witnesses
    purpose: Returns all witnesses registered in the blockchain.
      This returns a list of all account names that own witnesses and the associated witness id,
      sorted by name. This lists witnesses whether they are currently voted in or not.<br><br>
      <b>Request</b>

      <li>start - </li>
      <li>limit - </li>
      <li>order - </li><br>

      <b>Response</b>

      <li>witnesses - information about the witnesses stored in the blockchain</li><br>
    parameter_json: '{"start":"","limit":0,"order":""}'
    expected_response_json: '{"witnesses":[]}'
  - api_method: list_witnesses_by_vote
    purpose: Returns current witnesses by vote.
    parameter_json: '{"name":"","limit":0}'
    expected_response_json: '{"witnesses_by_vote":[]}'

  - api_method: send_and_sign_operation
    purpose: Creates transaction based on provided operation, signs it and broadcasts it to the network<br><br>

              <blockquote class="warning">
              <h5>This functionality should be done locally in SDK and not remotely !!! Only alexandria_api.broadcast_transaction should be called remotely. See "Internal steps" below.</h5>
              </blockquote>

              <b>Request</b>

              <li>op - any of the supported operations(TODO add link to supported operations)</li>
              <li>pk - sender private key</li><br>

              <b>Response</b>

              <li>signed_tx - signed, created and broadcasted transaction</li><br>

              <b>Internal steps make by this call are equivalent to:</b><br>

              <li>tx               = alexandria_api.create_simple_transaction(request.op)</li>
              <li>digest           = alexandria_api.get_transaction_digest(tx)</li>
              <li>signed_digest    = alexandria_api.sign_digest(digest, request.pk)</li>
              <li>signed_tx        = alexandria_api.add_siganture(tx, signed_digest)</li>
              <li>result.signed_tx = alexandria_api.broadcast_transaction(signed_tx)</li><BR>
    parameter_json: '{"op": [], "pk": ""}'
    expected_response_json: '{"signed_tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[],"transaction_id":"0000000000000000000000000000000000000000","block_num":0,"transaction_num":0}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.send_and_sign_operation", "params": {"op":["custom_json",{"fee":"0.000000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}],"pk":"sender PRIVATE KEY"}, "id": 1}'
    curl_responses:
    - '{"signed_tx":{"ref_block_num":2230,"ref_block_prefix":331838658,"expiration":"2019-04-04T12:10:42","operations":[["custom_json",{"fee":"0.010000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}]],"extensions":[],"signatures":["1f5f304dd4d478f498fb4e42f3abf75fb6e7b0f3d5da9a42068c36127374ce6bab64628c0fe22a4a7ff78d2b8a7176e8738a3ee7920f4c0787cbd4125755300154"],"transaction_id":"dacf80351711e1049bccf0d804b5556ca8282c17","block_num":2231,"transaction_num":0}}'
  - api_method: send_and_sign_transaction
    purpose: Signs provided transaction and broadcasts it to network<br><br>
              Such transaction can be created by call alexandria_api.create_simple_transaction(...)<br><br>

              <blockquote class="warning">
              <h5>This functionality should be done locally in SDK and not remotely !!! Only alexandria_api.broadcast_transaction should be called remotely. See "Internal steps" below.</h5>
              </blockquote>

              <b>Request</b>

              <li>tx - unsigned transaction</li>
              <li>pk - sender private key</li><br>

              <b>Response</b>

              <li>signed_tx - signed, created and broadcasted transaction</li><br>

              <b>Internal steps make by this call are equivalent to:</b><br>

              <li>digest           = alexandria_api.get_transaction_digest(tx)</li>
              <li>signed_digest    = alexandria_api.sign_digest(digest, request.pk)</li>
              <li>signed_tx        = alexandria_api.add_siganture(tx, signed_digest)</li>
              <li>result.signed_tx = alexandria_api.broadcast_transaction(signed_tx)</li><br>
    parameter_json: '{"tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[]},"pk":""}'
    expected_response_json: '{"signed_tx":{"ref_block_num":0,"ref_block_prefix":0,"expiration":"1970-01-01T00:00:00","operations":[],"extensions":[],"signatures":[""],"transaction_id":"0000000000000000000000000000000000000000","block_num":0,"transaction_num":0}}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.send_and_sign_transaction", "params": {"tx":{"ref_block_num":3701,"ref_block_prefix":914684397,"expiration":"2019-04-04T13:30:15","operations":[["custom_json",{"fee":"0.010000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}]],"extensions":[],"signatures":[]},"pk":"sender PRIVATE KEY"}, "id": 1}'
    curl_responses:
    - '{"signed_tx":{"ref_block_num":3701,"ref_block_prefix":914684397,"expiration":"2019-04-04T13:30:15","operations":[["custom_json",{"fee":"0.010000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}]],"extensions":[],"signatures":["203cd5873cba28262b2972245b2524341750cc8c1b67dc8fe5307f87c9aac8f8276365ac22002f91e8468c8160fa0343f5b1a5ca53a62464a4d9560a2a9173953d"],"transaction_id":"8b9afcccdf8bed9484fadd56eaa3bd744a13f819","block_num":3782,"transaction_num":0}}'

  - api_method: sign_digest
    purpose: Signs digest with provided private key.<br><br>

              <b>Request:</b><br>

              <li>digest - digest of transaction</li>
              <li>pk - private key for signing (in WIF format)</li><br>

              <b>Result:</b><br>

              <li>signed_digest - signed digest.</li><br>
    parameter_json: '{"digest":"0000000000000000000000000000000000000000000000000000000000000000","pk":""}'
    expected_response_json: '{"signed_digest":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}'

  - api_method: verify_signature
    purpose: Verifies signature of the provided digest based on provided publi key<br><br>

      <b>Request:</b><br>

      <li>digest - digest corresponding to signature.</li>
      <li>pub_key - public key corresponding to private_key,that signed digest.</li>
      <li>signature - signature to be verified.</li><br>

      <b>Result:</b><br>

      <li>signature_valid -  true if signature is valid, otherwise false.</li><br>
    parameter_json: '{"digest":"0000000000000000000000000000000000000000000000000000000000000000","pub_key":"SPH1111111111111111111111111111111114T1Anm","signature":"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}'
    expected_response_json: '{"signature_valid":false}'

  - api_method: transfer
    operation: transfer
    purpose: Creates \"transfer\" operation in requested json format.

      <b>Request:</b><br>

      <li>from - sender account</li>
      <li>to - recipient account</li>
      <li>amount - amount of SPHTX tokens to be transfered</li>
      <li>memo - custom note</li><br>

      <b>Result:</b><br>

      <li>op -  operation "transfer" created in required json format.</li><br>
    parameter_json: '{"from":"","to":"","amount":"0.000000 SPHTX","memo":""}'
    expected_response_json: '{"op":["transfer",{"fee":"0.000000 SPHTX","from":"","to":"","amount":"0.000000SPHTX","memo":""}]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.transfer", "params": {"from": "7HLPQ1kpnAIWawkAEgcoN4I7qJY", "to": "YWV2w-Q5eB3e0gt_nKS1m85sc0U", "amount": "1000.000000 SPHTX","memo": "some note"}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"op":["transfer",{"fee":"0.000000 SPHTX","from":"user1","to":"7HLPQ1kpnAIWawkAEgcoN4I7qJY","amount":"1000.000000 SPHTX","memo":"some note"}]},"id":1}'

  - api_method: transfer_to_vesting
    operation: transfer_to_vesting
    purpose: Creates \"transfer_to_vesting\" operation in requested json format. Transfer SPHTX into a vesting fund represented by vesting shares (VESTS). VESTS are required to vesting
      for a minimum of one coin year and can be withdrawn once a week over a two year withdraw period.
      VESTS are protected against dilution up until 90% of SPHTX is vesting.<br><br>

      <b>Request:</b><br>

      <li>from - account the SPHTX is coming from i.e. "account_name"</li>
      <li>to - account getting the VESTS i.e. "account_name"</li>
      <li>amount - amount of SPHTX to vest i.e. "100.00 SPHTX"</li><br>

      <b>Result:</b><br>

      <li>op -  operation "transfer_to_vesting" created in required json format.</li><br>
    parameter_json: '{"from":"","to":"","amount":"0.000000 SPHTX"}'
    expected_response_json: '{"op":["transfer_to_vesting",{"fee":"0.000000 SPHTX","from":"","to":"","amount":"0.000000SPHTX"}]}'

  - api_method: withdraw_vesting
    operation: withdraw_vesting
    purpose: Creates \"withdraw_vesting\" operation in requested json format. Set up a vesting withdraw request. The request is fulfilled once a week over the next two year (104 weeks).<br><br>

      <b>Request:</b><br>

      <li>from - account the VESTS are withdrawn from i.e. "account_name".</li>
      <li>vesting_shares The amount of VESTS to withdraw over the next two years. Each week (amount/104) shares are withdrawn and deposited back as SPHTX. i.e. "10.000000 VESTS".</li><br>

      <b>Result:</b><br>

      <li>op -  operation "withdraw_vesting" created in required json format.</li><br>
    parameter_json: '{"from":"","vesting_shares":"0.000000 SPHTX"}'
    expected_response_json: '{"op":["withdraw_vesting",{"fee":"0.000000 SPHTX","account":"","vesting_shares":"0.000000SPHTX"}]}'


  - api_method: transfer_from_promotion_pool
    operation: transfer_from_promotion_pool
    manual: true
    purpose: Recovers funds from the promotion pool. Only initminer can do that.<br><br>
    expected_response_json: '{"op":["transfer_from_promotion_pool",{...}]}'

  - api_method: create_account
    operation: account_create
    purpose: Creates operation 'account_create' in required json format<br><br>
      <b>Request</b>

      <li>creator - existing account. It can be later used to regenerate private key of created account</li>
      <li>name_seed - seed name of the new account</li>
      <li>json_meta - any data related to the new account</li>
      <li>owner - owner public key. Paired private key has full control over this account</li>
      <li>active - active public key. Paired private key has restricted control over this account</li>
      <li>memo - memo public key. It is used for encrypting messages meant to be read only by this account. Paired private is used fot decrypting</li><br>

      <b>Response</b>

      <li>op - operation "account_create" created in required json format</li><br>
    parameter_json: '{"creator":"","name_seed":"","json_meta":"","owner":"SPH1111111111111111111111111111111114T1Anm","active":"SPH1111111111111111111111111111111114T1Anm","memo":"SPH1111111111111111111111111111111114T1Anm"}'
    expected_response_json: '{"op":["account_create",{"fee":"0.000000 SPHTX","creator":"","name_seed":"","owner":{"weight_threshold":0,"account_auths":[],"key_auths":[]},"active":{"weight_threshold":0,"account_auths":[],"key_auths":[]},"memo_key":"SPH1111111111111111111111111111111114T1Anm","json_metadata":""}]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.create_account", "params": {"creator": "user1","name_seed": "sophiatx_user","json_meta": "{\"data\":\"anything related to the sophiatx_user\"}","owner": "SPH7qASF1CfENDRWdKC5gQCktydRQM2aY3i1d9wFdu1fjpURgTxiw","active": "SPH5ekkeER1xi3EDoxoggo2ruMgPazKsGa8Pj44qrD326oDk5rgKP","memo": "SPH4vtSio7iGMggFboydFjgRZknPEH1BExcN3r4rjb9iznJQr7Mqy"}, "id": 1}'
    curl_responses:
    - '{"jsonrpc":"2.0","result":{"op":["account_create",{"fee":"0.000000 SPHTX","creator":"user1","name_seed":"sophiatx_user","owner":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH7qASF1CfENDRWdKC5gQCktydRQM2aY3i1d9wFdu1fjpURgTxiw",1]]},"active":{"weight_threshold":1,"account_auths":[],"key_auths":[["SPH5ekkeER1xi3EDoxoggo2ruMgPazKsGa8Pj44qrD326oDk5rgKP",1]]},"memo_key":"SPH4vtSio7iGMggFboydFjgRZknPEH1BExcN3r4rjb9iznJQr7Mqy","json_metadata":"{\"data\":\"anything related to the sophiatx_user\"}"}]},"id":1}'

  - api_method: update_account
    operation: account_update
    purpose: Creates \"account_update\" operation in requested json format. Updates the keys of an existing account.<br><br>

      <b>Request:</b><br>

      <li>account_name - name of the account i.e. "account_name"</li>
      <li>json_meta - new JSON Metadata to be associated with the account</li>
      <li>owner - new public owner key for the account</li>
      <li>active - new public active key for the account</li>
      <li>memo - new public memo key for the account</li><br>

      <b>Result:</b><br>

      <li>op -  operation "account_update" created in required json format.</li><br>
    parameter_json: '{"account_name":"","json_meta":"","owner":"SPH1111111111111111111111111111111114T1Anm","active":"SPH1111111111111111111111111111111114T1Anm","memo":"SPH1111111111111111111111111111111114T1Anm"}'
    expected_response_json: '{"op":["account_update",{"fee":"0.000000 SPHTX","account":"","memo_key":"SPH1111111111111111111111111111111114T1Anm","json_metadata":""}]}'

  - api_method: delete_account
    operation: account_delete
    purpose: Returns "account_delete" operation in requested json format.<br><br>
      <b>Request:</b>

      <li>account_name - name of the account to be deleted</li><br>

      <b>Response:</b>

      <li>op -  operation "account_delete" created in required json format.</li><br>
    parameter_json: '{"account_name":""}'
    expected_response_json: '{"op":["account_delete",{"fee":"0.000000 SPHTX","account":""}]}'

  - api_method: request_account_recovery
    operation: request_account_recovery
    manual: true
    purpose: All account recovery requests come from a listed recovery account. This
      is secure based on the assumption that only a trusted account should be
      a recovery account. It is the responsibility of the recovery account to
      verify the identity of the account holder of the account to recover by
      whichever means they have agreed upon. The blockchain assumes identity
      has been verified when this operation is broadcast.<br><br>

      This operation creates an account recovery request which the account to
      recover has 24 hours to respond to before the request expires and is
      invalidated.<br><br>

      There can only be one active recovery request per account at any one time.
      Pushing this operation for an account to recover when it already has
      an active request will either update the request to a new new owner authority
      and extend the request expiration to 24 hours from the current head block
      time or it will delete the request. To cancel a request, simply set the
      weight threshold of the new owner authority to 0, making it an open authority.<br><br>

      Additionally, the new owner authority must be satisfiable. In other words,
      the sum of the key weights must be greater than or equal to the weight
      threshold.<br><br>

      This operation only needs to be signed by the the recovery account.
      The account to recover confirms its identity to the blockchain in
      the recover account operation.<br><br>

      Notes<br>

      <li><b>recovery_account</b> - The recovery account is listed as the recovery account on the account to recover.</li>
      <li><b>account_to_recover</b> - The account to recover. This is likely due to a compromised owner authority.</li>
      <li><b>new_owner_authority</b> - The new owner authority the account to recover wishes to have. This is secret known by the account to recover and will be confirmed in a recover_account.</li><br>
    expected_response_json: '{"op":[
                                     "request_account_recovery",
                                     {
                                       "recovery_account": "sophiatx",
                                       "account_to_recover": "alice",
                                       "new_owner_authority": {
                                         "weight_threshold": 1,
                                         "account_auths": [],
                                         "key_auths": [
                                           [
                                             "STM6LYxj96zdypHYqgDdD6Nyh2NxerN3P1Mp3ddNm7gci63nfrSuZ",
                                             1
                                           ]
                                         ]
                                       },
                                       "extensions": []
                                     }
                                   ]}'

  - api_method: recover_account
    operation: recover_account
    manual: true
    purpose: Recover an account to a new authority using a previous authority and verification
      of the recovery account as proof of identity. This operation can only succeed
      if there was a recovery request sent by the account's recover account.<br><br>

      In order to recover the account, the account holder must provide proof
      of past ownership and proof of identity to the recovery account. Being able
      to satisfy an owner authority that was used in the past 30 days is sufficient
      to prove past ownership. The get_owner_history function in the database API
      returns past owner authorities that are valid for account recovery.<br><br>

      Proving identity is an off chain contract between the account holder and
      the recovery account. The recovery request contains a new authority which
      must be satisfied by the account holder to regain control. The actual process
      of verifying authority may become complicated, but that is an application
      level concern, not a blockchain concern.<br><br>

      This operation requires both the past and future owner authorities in the
      operation because neither of them can be derived from the current chain state.
      The operation must be signed by keys that satisfy both the new owner authority
      and the recent owner authority. Failing either fails the operation entirely.<br><br>

      If a recovery request was made inadvertantly, the account holder should
      contact the recovery account to have the request deleted.<br><br>

      The two setp combination of the account recovery request and recover is
      safe because the recovery account never has access to secrets of the account
      to recover. They simply act as an on chain endorsement of off chain identity.
      In other systems, a fork would be required to enforce such off chain state.
      Additionally, an account cannot be permanently recovered to the wrong account.
      While any owner authority from the past 30 days can be used, including a compromised
      authority, the account can be continually recovered until the recovery account
      is confident a combination of uncompromised authorities were used to
      recover the account. The actual process of verifying authority may become
      complicated, but that is an application level concern, not the blockchain's
      concern.<br><br>
    expected_response_json: '{"op":[
                                     "recover_account",
                                     {
                                       "account_to_recover": "alice",
                                       "new_owner_authority": {
                                         "weight_threshold": 1,
                                         "account_auths": [],
                                         "key_auths": [
                                           [
                                             "STM7j3nhkhHTpXqLEvdx2yEGhQeeorTcxSV6WDL2DZGxwUxYGrHvh",
                                             1
                                           ]
                                         ]
                                       },
                                       "recent_owner_authority": {
                                         "weight_threshold": 1,
                                         "account_auths": [],
                                         "key_auths": [
                                           [
                                             "STM78Xth94gNxp8nmByFV2vNAhg9bsSdviJ6fQXUTFikySLK3uTxC",
                                             1
                                           ]
                                         ]
                                       },
                                       "extensions": []
                                     }
                                   ]}'

  - api_method: change_recovery_account
    operation: change_recovery_account
    manual: true
    purpose: Each account lists another account as their recovery account.
      The recovery account has the ability to create account_recovery_requests
      for the account to recover. An account can change their recovery account
      at any time with a 30 day delay. This delay is to prevent
      an attacker from changing the recovery account to a malicious account
      during an attack. These 30 days match the 30 days that an
      owner authority is valid for recovery purposes.<br><br>

      On account creation the recovery account is set either to the creator of
      the account (The account that pays the creation fee and is a signer on the transaction)
      or to the empty string if the account was mined. An account with no recovery
      has the top voted witness as a recovery account, at the time the recover
      request is created. Note - This does mean the effective recovery account
      of an account with no listed recovery account can change at any time as
      witness vote weights. The top voted witness is explicitly the most trusted
      witness according to stake.<br><br>
    expected_response_json: '{"op":[
                                     "change_recovery_account",
                                     {
                                       "account_to_recover": "alice",
                                       "new_recovery_account": "bob",
                                       "extensions": []
                                     }
                                   ]}'

  - api_method: reset_account
    operation: reset_account
    manual: true
    purpose: This operation allows recovery_accoutn to change account_to_reset's owner authority to
      new_owner_authority after 60 days of inactivity.<br><br>
    expected_response_json: '{"op":[
                                    "reset_account",
                                    {
                                      "reset_account": "alice",
                                      "account_to_reset": "bob",
                                      "new_owner_authority": {
                                         "weight_threshold": 1,
                                         "account_auths": [],
                                         "key_auths": [
                                           [
                                             "STM7j3nhkhHTpXqLEvdx2yEGhQeeorTcxSV6WDL2DZGxwUxYGrHvh",
                                             1
                                           ]
                                         ]
                                       }
                                    }
                                  ]}'

  - api_method: set_reset_account
    operation: set_reset_account
    manual: true
    purpose: This operation allows 'account' owner to control which account has the power
      to execute the 'reset_account_operation' after 60 days.<br><br>
    expected_response_json: '{"op":[
                                  "set_reset_account",
                                  {
                                    "account": "alice",
                                    "current_reset_account": "bob",
                                    "reset_account": "sophiatx"
                                  }
                                ]}'

  - api_method: create_application
    operation: application_create
    purpose: Returns "application_create" operation in required format. There is a fee associated with account creation
      that is paid by the creator. The current account creation fee can be found with the
      'info' alexandria command.<br><br>
      <b>Request</b>

      <li>author - account creating the new application i.e. "account_name"</li>
      <li>app_name - unique name for new application</li>
      <li>url - url of the new application</li>
      <li>meta_data - meta data of new application</li>
      <li>price_param - price parameter that specifies billing for the app</li><br>

      <b>Response</b>

      <li>op - "application_create" operation in required format</li><br>
    parameter_json: '{"author":"","app_name":"","url":"","meta_data":"","price_param":0}'
    expected_response_json: '{"op":["application_create",{"fee":"0.000000 SPHTX","author":"","name":"","url":"","metadata":"","price_param":0}]}'

  - api_method: update_application
    operation: application_update
    purpose: Creates \"application_update\" operation in requested json format. Updates existing application object.<br><br>

      <b>Request:</b><br>

      <li>author - author of application i.e. "account_name"</li>
      <li>app_name - name of app that will be updated</li>
      <li>new_author - new author i.e. "account_name"</li>
      <li>url - updated url</li>
      <li>meta_data - updated meta data</li>
      <li>price_param - updated price param</li><br>

      <b>Result:</b><br>

      <li>op -  operation "application_update" created in required json format.</li><br>
    parameter_json: '{"author":"","app_name":"","new_author":"","url":"","meta_data":"","price_param":0}'
    expected_response_json: '{"op":["application_update",{"fee":"0.000000 SPHTX","author":"","name":"","url":"","metadata":""}]}'

  - api_method: delete_application
    operation: application_delete
    purpose: Returns "application_delete" operation in required format.
      <b>Request</b>

      <li>author - author of application that will be deleted i.e. "account_name"</li>
      <li>app_name - name of app that will be deleted</li>

      <b>Response</b>

      <li>op - "application_delete" operation in required format</li><br>
    parameter_json: '{"author":"","app_name":""}'
    expected_response_json: '{"op":["application_delete",{"fee":"0.000000 SPHTX","author":"","name":""}]}'

  - api_method: buy_application
    operation: buy_application
    purpose: Returns "buy_application" operation in required format.<br><br>
      <b>Request</b>

      <li>buyer - buyer of application i.e. "account_name"</li>
      <li>app_id - id of application that buyer will buy</li><br>
      <b>Response</b>

      <li>op - "buy_application" operation in required format</li><br>
    parameter_json: '{"buyer":"","app_id":0}'
    expected_response_json: '{"op":["buy_application",{"fee":"0.000000 SPHTX","buyer":"","app_id":0}]}'

  - api_method: cancel_application_buying
    operation: cancel_application_buying
    purpose: Returns "cancel_application_buying" operation in required format.<br><br>
      <b>Request</b>

      <li>app_owner - owner of bought application i.e. "account_name"</li>
      <li>buyer - buyer of application i.e. "account_name"</li>
      <li>app_id - id of application that buyer will buy</li><br>
      <b>Response</b>

      <li>op - "cancel_application_buying" operation in required format</li><br>
    parameter_json: '{"app_owner":"","buyer":"","app_id":0}'
    expected_response_json: '{"op":["cancel_application_buying",{"fee":"0.000000 SPHTX","app_owner":"","buyer":"","app_id":0}]}'


  - api_method: make_custom_binary_operation
    operation: custom_binary
    purpose: Creates \"custom_binary\" operation in requested json format.

      <b>Request:</b><br>

      <li>app_id - application-specific id</li>
      <li>from - sender account</li>
      <li>to - recipients accounts</li>
      <li>data - data in base64 format</li>

      <b>Result:</b><br>

      <li>op -  operation "custom_binary" created in required json format. Important - "data" field inside operation is in hex format</li><br>
    parameter_json: '{"app_id": 0, "from": "", "to": [], "data": ""}'
    expected_response_json: '{"op":["custom_binary",{"fee":"0.000000 SPHTX","sender":"","recipients":[],"app_id":0,"data":""}]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.make_custom_binary_operation", "params": {"app_id": 10, "from": "user1", "to": ["user2", "user3"], "data": "SGVsbG8gU29waGlhVFg="}, "id": 1}'
    curl_responses:
    - '{"op":["custom_binary",{"fee":"0.000000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"data":"48656c6c6f20536f706869615458"}]}'

  - api_method: make_custom_json_operation
    operation: custom_json
    purpose: Creates \"custom_json\" operation in requested json format.<br><br>

      <b>Request:</b><br>

      <li>app_id - application-specific id</li>
      <li>from - sender account</li>
      <li>to - recipients accounts</li>
      <li>data - any valid data json data</li>

      <b>Result:</b><br>

      <li>op - operation "custom_json" created in required json format.</li><br>
    parameter_json: '{"app_id": 0, "from": "", "to": [], "json": ""}'
    expected_response_json: '{"op":[]}'
    curl_examples:
    - '{"jsonrpc": "2.0", "method": "alexandria_api.make_custom_json_operation", "params": {"app_id": 10, "from": "user1", "to": ["user2", "user3"], "json": "{\"data\":\"any valid json data\"}"}, "id": 1}'
    curl_responses:
    - '{"op":["custom_json",{"fee":"0.000000 SPHTX","sender":"user1","recipients":["user2","user3"],"app_id":10,"json":"{\"data\":\"any valid json data\"}"}]}'

  - api_method: sponsor_account_fees
    operation: sponsor_fees
    purpose: Creates \"sponsor_fees\" operation in requested json format.<br><br>

      <b>Request</b>

      <li>sponsoring_account - account name that will sponsor fees</li>
      <li>sponsored_account - account that will be sponsored</li>
      <li>is_sponsoring - true or false if you want to enable/disable this operation</li><br>

      <b>Response</b>

      <li>op - creates \"sponsor_fees\" operation</li><br>
    parameter_json: '{"sponsoring_account":"","sponsored_account":"","is_sponsoring":false}'
    expected_response_json: '{"op":["sponsor_fees",{"fee":"0.000000 SPHTX","sponsor":"","sponsored":"","is_sponsoring":false}]}'

  - api_method: stop_witness
    operation: witness_stop
    purpose: Creates \"witness_stop\" operation in requested json format. Stop being a witness,effectively deleting the witness object owned by the given account.<br><br>

      <b>Request</b>

      <li>witness_name - name of the witness account i.e. "account_name"</li><br>

      <b>Response</b>

      <li>op - creates \"witness_stop\" operation</li><br>
    parameter_json: '{"witness_account_name":""}'
    expected_response_json: '{"op":["witness_stop",{"fee":"0.000000 SPHTX","owner":""}]}'

  - api_method: update_witness
    operation: witness_update
    purpose: Creates \"witness_update\" operation in requested json format. Updates a witness object owned by the given account.<br><br>

      <b>Request:</b><br>

      <li>witness_name - the name of the witness account.</li>
      <li>url - url containing some information about the witness. The empty string makes it remain the same.</li>
      <li>block_signing_key - new block signing public key. The empty string disables block production.</li>
      <li>props - chain properties the witness is voting on.</li><br>

      <b>Result:</b><br>

      <li>op -  operation "witness_update" created in required json format.</li><br>
    parameter_json: '{"witness_account_name":"","url":"","block_signing_key":"SPH1111111111111111111111111111111114T1Anm","props":{"account_creation_fee":"0.000000
    SPHTX","maximum_block_size":262144,"price_feeds":[]}}'
    expected_response_json: '{"op":["witness_update",{"fee":"0.000000 SPHTX","owner":"","url":"","block_signing_key":"SPH1111111111111111111111111111111114T1Anm","props":{"account_creation_fee":"0.000000SPHTX","maximum_block_size":262144,"price_feeds":[]}}]}'

  - api_method: set_voting_proxy
    operation: account_witness_proxy
    purpose: Creates \"account_witness_proxy\" operation in requested json format. Sets the voting proxy for an account. If a user does not wish to take an active part in voting,they can choose
      to allow another account to vote their stake. Setting a vote proxy does not remove your previous votes from the blockchain,
      they remain there but are ignored. If you later null out your vote proxy, your previous votes will take effect again.
      This setting can be changed at any time.<br><br>

      <b>Request</b>

      <li>account_to_modify - the name or id of the account to update i.e. "account_name"</li>
      <li>proxy - the name of account that should proxy to or empty string to have no proxy</li><br>

      <b>Response</b>

      <li>op - creates \"account_witness_proxy\" operation</li><br>
    parameter_json: '{"account_to_modify":"","proxy":""}'
    expected_response_json: '{"op":["account_witness_proxy",{"fee":"0.000000 SPHTX","account":"","proxy":""}]}'

  - api_method: witness_set_properties
    operation: witness_set_properties
    manual: true
    purpose: Replaces the witness_update which was not easily extendable. While it is recommended to use witness_set_properties, witness_update will continue to work<br><br>
    expected_response_json: '{"op":[
                                     "witness_set_properties",
                                     {
                                       "owner": "alice",
                                       "props": {
                                         "account_creation_fee": "0.000 SPHTX",
                                         "account_subsidy_budget": 10000,
                                         "account_subsidy_decay": 330782,
                                         "maximum_block_size": 65536,
                                         "sbd_interest_rate": "0.000 SPHTX",
                                         "sbd_exchange_rate": {
                                           "base": "0.000 SBD",
                                           "quote": "0.000 SPHTX"
                                         },
                                         "url": "68747470733A2F2F737465656D69742E636F6D",
                                         "new_signing_key": "25688bbe7b1204f26e40be054c8b2ff1997eec6d4e7be6a105aab8a0e6f11c616d7cb6066"
                                       },
                                       "extensions": []
                                     }
                                   ]}'

  - api_method: admin_witness_update
    operation: admin_witness_update
    manual: true
    purpose: Add description.<br>
      This opertion can be used only in private nets.<br><br>
    expected_response_json: '{"op":["add name",{}]}'

  - api_method: vote_for_witness
    operation: account_witness_vote
    purpose: Creates \"account_witness_vote\" operation in requested json format. Vote for a witness to become a block producer. By default an account has not voted
      positively or negatively for a witness. The account can either vote for with positively votes or against with negative votes. The vote will remain until updated with another
      vote. Vote strength is determined by the accounts vesting shares.<br><br>

      <b>Request:</b><br>

      <li>account_to_vote_with - account voting for a witness i.e. "account_name".</li>
      <li>witness_to_vote_for - witness that is being voted for i.e. "account_name".</li>
      <li>approve - true if the account is voting for the account to be able to be a block produce.</li><br>

      <b>Result:</b><br>

      <li>op -  operation "account_witness_vote" created in required json format.</li><br>
    parameter_json: '{"voting_account":"","witness_to_vote_for":"","approve":false}'
    expected_response_json: '{"op":["account_witness_vote",{"fee":"0.000000 SPHTX","account":"","witness":"","approve":true}]}'

  - api_method: feed_publish
    operation: feed_publish
    manual: true
    purpose: 'Feeds can only be published by the top N witnesses which are included in every round and are
      used to define the exchange rate between sophiatx and the fiat currencies.<br><br>
      Represents quotation of the relative value of asset against another asset.
      Similar to \"currency pair\" used to determine value of currencies.<br><br>

      For example: <br>
      1 SPHTX / 1.25 USD where:<br>
      1 SPHTX is an asset specified as a base<br>
      1.25 USD us an asset specified as a quote<br><br>

      can determine value of SPHTX against USD.<br>'
    expected_response_json: '{"op":["feed_publish",{"publisher": "user1","exchange_rate": {"base": {"amount": 1,"symbol": "SPHTX"},"quote": {"amount": 1.25,"symbol": "USD"}}}]}'

  - api_method: escrow_transfer
    operation: escrow_transfer
    manual: true
    purpose: The purpose of this operation is to enable someone to send money contingently to
      another individual. The funds leave the from account and go into a temporary balance
      where they are held until from releases it to to or to refunds it to from.<br><br>

      In the event of a dispute the agent can divide the funds between the to/from account.
      Disputes can be raised any time before or on the dispute deadline time, after the escrow
      has been approved by all parties.<br><br>

      This operation only creates a proposed escrow transfer. Both the agent and to must
      agree to the terms of the arrangement by approving the escrow.<br><br>

      The escrow agent is paid the fee on approval of all parties. It is up to the escrow agent
      to determine the fee.<br><br>

      Escrow transactions are uniquely identified by 'from' and 'escrow_id', the 'escrow_id' is defined
      by the sender.<br><br>
    expected_response_json: '{"op":[
                                     "escrow_transfer",
                                     {
                                       "from": "alice",
                                       "to": "bob",
                                       "sophiatx_amount": {
                                         "amount": "1.000000",
                                         "symbol": "SPHTX"
                                       },
                                       "escrow_id": 23456789,
                                       "agent": "charlie",
                                       "escrow_fee": {
                                         "amount": "0.1",
                                         "symbol": "USD"
                                       },
                                       "json_meta": "{}",
                                       "ratification_deadline": "2017-02-26T11:22:39",
                                       "escrow_expiration": "2017-02-28T11:22:39"
                                     }
                                   ]}'

  - api_method: escrow_approve
    operation: escrow_approve
    manual: true
    purpose: The agent and to accounts must approve an escrow transaction for it to be valid on
             the blockchain. Once a part approves the escrow, they cannot revoke their approval.
             Subsequent escrow approve operations, regardless of the approval, will be rejected.<br><br>
    expected_response_json: '{"op":[
                                     "escrow_approve",
                                     {
                                       "from": "alice",
                                       "to": "bob",
                                       "agent": "charlie",
                                       "who": "charlie",
                                       "escrow_id": 59102208,
                                       "approve": true
                                     }
                                   ]}'

  - api_method: escrow_dispute
    operation: escrow_dispute
    manual: true
    purpose: If either the sender or receiver of an escrow payment has an issue, they can
             raise it for dispute. Once a payment is in dispute, the agent has authority over
             who gets what.<br><br>
    expected_response_json: '{"op":[
                                     "escrow_dispute",
                                     {
                                       "from": "alice",
                                       "to": "bob",
                                       "agent": "charlie",
                                       "who": "alice",
                                       "escrow_id": 72526562
                                     }
                                   ]}'

  - api_method: escrow_release
    operation: escrow_release
    manual: true
    purpose: This operation can be used by anyone associated with the escrow transfer to
      release funds if they have permission.<br><br>

      The permission scheme is as follows<br>

      <li>If there is no dispute and escrow has not expired, either party can release funds to the other.</li>
      <li>If escrow expires and there is no dispute, either party can release funds to either party.</li>
      <li>If there is a dispute regardless of expiration, the agent can release funds to either party
      following whichever agreement was in place between the parties.</li><br>
    expected_response_json: '{"op":[
                                     "escrow_release",
                                     {
                                       "from": "alice",
                                       "to": "bob",
                                       "agent": "charlie",
                                       "who": "charlie",
                                       "receiver": "bob",
                                       "escrow_id": 72526562,
                                       "sbd_amount": {
                                         "amount": "5000",
                                         "precision": 3,
                                         "nai": "@@000000013"
                                       },
                                       "steem_amount": {
                                         "amount": "0",
                                         "precision": 3,
                                         "nai": "@@000000021"
                                       }
                                     }
                                   ]}'